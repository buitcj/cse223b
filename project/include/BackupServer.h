/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackupServer_H
#define BackupServer_H

#include <thrift/TDispatchProcessor.h>
#include "BackupServer_types.h"

namespace BackupServer {

class BackupServerIf {
 public:
  virtual ~BackupServerIf() {}
  virtual void GetPointsInRegion(GetPointsResponse& _return, const Point& ul, const Point& lr) = 0;
  virtual int32_t AddPoint(const Point& p, const std::string& desc) = 0;
  virtual void Commit(const Point& p, const int32_t id) = 0;
};

class BackupServerIfFactory {
 public:
  typedef BackupServerIf Handler;

  virtual ~BackupServerIfFactory() {}

  virtual BackupServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BackupServerIf* /* handler */) = 0;
};

class BackupServerIfSingletonFactory : virtual public BackupServerIfFactory {
 public:
  BackupServerIfSingletonFactory(const boost::shared_ptr<BackupServerIf>& iface) : iface_(iface) {}
  virtual ~BackupServerIfSingletonFactory() {}

  virtual BackupServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BackupServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<BackupServerIf> iface_;
};

class BackupServerNull : virtual public BackupServerIf {
 public:
  virtual ~BackupServerNull() {}
  void GetPointsInRegion(GetPointsResponse& /* _return */, const Point& /* ul */, const Point& /* lr */) {
    return;
  }
  int32_t AddPoint(const Point& /* p */, const std::string& /* desc */) {
    int32_t _return = 0;
    return _return;
  }
  void Commit(const Point& /* p */, const int32_t /* id */) {
    return;
  }
};

typedef struct _BackupServer_GetPointsInRegion_args__isset {
  _BackupServer_GetPointsInRegion_args__isset() : ul(false), lr(false) {}
  bool ul;
  bool lr;
} _BackupServer_GetPointsInRegion_args__isset;

class BackupServer_GetPointsInRegion_args {
 public:

  BackupServer_GetPointsInRegion_args() {
  }

  virtual ~BackupServer_GetPointsInRegion_args() throw() {}

  Point ul;
  Point lr;

  _BackupServer_GetPointsInRegion_args__isset __isset;

  void __set_ul(const Point& val) {
    ul = val;
  }

  void __set_lr(const Point& val) {
    lr = val;
  }

  bool operator == (const BackupServer_GetPointsInRegion_args & rhs) const
  {
    if (!(ul == rhs.ul))
      return false;
    if (!(lr == rhs.lr))
      return false;
    return true;
  }
  bool operator != (const BackupServer_GetPointsInRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_GetPointsInRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackupServer_GetPointsInRegion_pargs {
 public:


  virtual ~BackupServer_GetPointsInRegion_pargs() throw() {}

  const Point* ul;
  const Point* lr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackupServer_GetPointsInRegion_result__isset {
  _BackupServer_GetPointsInRegion_result__isset() : success(false) {}
  bool success;
} _BackupServer_GetPointsInRegion_result__isset;

class BackupServer_GetPointsInRegion_result {
 public:

  BackupServer_GetPointsInRegion_result() {
  }

  virtual ~BackupServer_GetPointsInRegion_result() throw() {}

  GetPointsResponse success;

  _BackupServer_GetPointsInRegion_result__isset __isset;

  void __set_success(const GetPointsResponse& val) {
    success = val;
  }

  bool operator == (const BackupServer_GetPointsInRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackupServer_GetPointsInRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_GetPointsInRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackupServer_GetPointsInRegion_presult__isset {
  _BackupServer_GetPointsInRegion_presult__isset() : success(false) {}
  bool success;
} _BackupServer_GetPointsInRegion_presult__isset;

class BackupServer_GetPointsInRegion_presult {
 public:


  virtual ~BackupServer_GetPointsInRegion_presult() throw() {}

  GetPointsResponse* success;

  _BackupServer_GetPointsInRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackupServer_AddPoint_args__isset {
  _BackupServer_AddPoint_args__isset() : p(false), desc(false) {}
  bool p;
  bool desc;
} _BackupServer_AddPoint_args__isset;

class BackupServer_AddPoint_args {
 public:

  BackupServer_AddPoint_args() : desc() {
  }

  virtual ~BackupServer_AddPoint_args() throw() {}

  Point p;
  std::string desc;

  _BackupServer_AddPoint_args__isset __isset;

  void __set_p(const Point& val) {
    p = val;
  }

  void __set_desc(const std::string& val) {
    desc = val;
  }

  bool operator == (const BackupServer_AddPoint_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const BackupServer_AddPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_AddPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackupServer_AddPoint_pargs {
 public:


  virtual ~BackupServer_AddPoint_pargs() throw() {}

  const Point* p;
  const std::string* desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackupServer_AddPoint_result__isset {
  _BackupServer_AddPoint_result__isset() : success(false) {}
  bool success;
} _BackupServer_AddPoint_result__isset;

class BackupServer_AddPoint_result {
 public:

  BackupServer_AddPoint_result() : success(0) {
  }

  virtual ~BackupServer_AddPoint_result() throw() {}

  int32_t success;

  _BackupServer_AddPoint_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const BackupServer_AddPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackupServer_AddPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_AddPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackupServer_AddPoint_presult__isset {
  _BackupServer_AddPoint_presult__isset() : success(false) {}
  bool success;
} _BackupServer_AddPoint_presult__isset;

class BackupServer_AddPoint_presult {
 public:


  virtual ~BackupServer_AddPoint_presult() throw() {}

  int32_t* success;

  _BackupServer_AddPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackupServer_Commit_args__isset {
  _BackupServer_Commit_args__isset() : p(false), id(false) {}
  bool p;
  bool id;
} _BackupServer_Commit_args__isset;

class BackupServer_Commit_args {
 public:

  BackupServer_Commit_args() : id(0) {
  }

  virtual ~BackupServer_Commit_args() throw() {}

  Point p;
  int32_t id;

  _BackupServer_Commit_args__isset __isset;

  void __set_p(const Point& val) {
    p = val;
  }

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const BackupServer_Commit_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const BackupServer_Commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_Commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackupServer_Commit_pargs {
 public:


  virtual ~BackupServer_Commit_pargs() throw() {}

  const Point* p;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackupServer_Commit_result {
 public:

  BackupServer_Commit_result() {
  }

  virtual ~BackupServer_Commit_result() throw() {}


  bool operator == (const BackupServer_Commit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackupServer_Commit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackupServer_Commit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackupServer_Commit_presult {
 public:


  virtual ~BackupServer_Commit_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BackupServerClient : virtual public BackupServerIf {
 public:
  BackupServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BackupServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetPointsInRegion(GetPointsResponse& _return, const Point& ul, const Point& lr);
  void send_GetPointsInRegion(const Point& ul, const Point& lr);
  void recv_GetPointsInRegion(GetPointsResponse& _return);
  int32_t AddPoint(const Point& p, const std::string& desc);
  void send_AddPoint(const Point& p, const std::string& desc);
  int32_t recv_AddPoint();
  void Commit(const Point& p, const int32_t id);
  void send_Commit(const Point& p, const int32_t id);
  void recv_Commit();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BackupServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BackupServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BackupServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetPointsInRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Commit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BackupServerProcessor(boost::shared_ptr<BackupServerIf> iface) :
    iface_(iface) {
    processMap_["GetPointsInRegion"] = &BackupServerProcessor::process_GetPointsInRegion;
    processMap_["AddPoint"] = &BackupServerProcessor::process_AddPoint;
    processMap_["Commit"] = &BackupServerProcessor::process_Commit;
  }

  virtual ~BackupServerProcessor() {}
};

class BackupServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BackupServerProcessorFactory(const ::boost::shared_ptr< BackupServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BackupServerIfFactory > handlerFactory_;
};

class BackupServerMultiface : virtual public BackupServerIf {
 public:
  BackupServerMultiface(std::vector<boost::shared_ptr<BackupServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BackupServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BackupServerIf> > ifaces_;
  BackupServerMultiface() {}
  void add(boost::shared_ptr<BackupServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetPointsInRegion(GetPointsResponse& _return, const Point& ul, const Point& lr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPointsInRegion(_return, ul, lr);
    }
    ifaces_[i]->GetPointsInRegion(_return, ul, lr);
    return;
  }

  int32_t AddPoint(const Point& p, const std::string& desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddPoint(p, desc);
    }
    return ifaces_[i]->AddPoint(p, desc);
  }

  void Commit(const Point& p, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Commit(p, id);
    }
    ifaces_[i]->Commit(p, id);
  }

};

} // namespace

#endif
