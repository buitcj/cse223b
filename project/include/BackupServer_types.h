/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackupServer_TYPES_H
#define BackupServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace BackupServer {

struct BackupServerStatus {
  enum type {
    OK = 0,
    FAILED = 1
  };
};

extern const std::map<int, const char*> _BackupServerStatus_VALUES_TO_NAMES;

typedef struct _ThriftGeoPoint__isset {
  _ThriftGeoPoint__isset() : xCoord(false), yCoord(false), message(false) {}
  bool xCoord;
  bool yCoord;
  bool message;
} _ThriftGeoPoint__isset;

class ThriftGeoPoint {
 public:

  static const char* ascii_fingerprint; // = "3141FDB05C98B5AB301A852FF546E1D6";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0x41,0xFD,0xB0,0x5C,0x98,0xB5,0xAB,0x30,0x1A,0x85,0x2F,0xF5,0x46,0xE1,0xD6};

  ThriftGeoPoint() : xCoord(0), yCoord(0), message() {
  }

  virtual ~ThriftGeoPoint() throw() {}

  double xCoord;
  double yCoord;
  std::string message;

  _ThriftGeoPoint__isset __isset;

  void __set_xCoord(const double val) {
    xCoord = val;
  }

  void __set_yCoord(const double val) {
    yCoord = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ThriftGeoPoint & rhs) const
  {
    if (!(xCoord == rhs.xCoord))
      return false;
    if (!(yCoord == rhs.yCoord))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ThriftGeoPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftGeoPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ThriftGeoPoint &a, ThriftGeoPoint &b);

typedef struct _GetPointsResponse__isset {
  _GetPointsResponse__isset() : status(false), pts(false) {}
  bool status;
  bool pts;
} _GetPointsResponse__isset;

class GetPointsResponse {
 public:

  static const char* ascii_fingerprint; // = "D2DECD9CC7A2C0EB10E445BFA1082098";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0xDE,0xCD,0x9C,0xC7,0xA2,0xC0,0xEB,0x10,0xE4,0x45,0xBF,0xA1,0x08,0x20,0x98};

  GetPointsResponse() : status((BackupServerStatus::type)0) {
  }

  virtual ~GetPointsResponse() throw() {}

  BackupServerStatus::type status;
  std::vector<ThriftGeoPoint>  pts;

  _GetPointsResponse__isset __isset;

  void __set_status(const BackupServerStatus::type val) {
    status = val;
  }

  void __set_pts(const std::vector<ThriftGeoPoint> & val) {
    pts = val;
  }

  bool operator == (const GetPointsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(pts == rhs.pts))
      return false;
    return true;
  }
  bool operator != (const GetPointsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPointsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPointsResponse &a, GetPointsResponse &b);

} // namespace

#endif
