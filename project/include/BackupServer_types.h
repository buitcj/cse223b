/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackupServer_TYPES_H
#define BackupServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace BackupServer {

struct BackupServerStatus {
  enum type {
    OK = 0,
    FAILED = 1
  };
};

extern const std::map<int, const char*> _BackupServerStatus_VALUES_TO_NAMES;

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Point() : x(0), y(0) {
  }

  virtual ~Point() throw() {}

  double x;
  double y;

  _Point__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Point &a, Point &b);

typedef struct _GetPointsResponse__isset {
  _GetPointsResponse__isset() : status(false), pts(false) {}
  bool status;
  bool pts;
} _GetPointsResponse__isset;

class GetPointsResponse {
 public:

  static const char* ascii_fingerprint; // = "671E4DE9FBAA549FF6625A8B38B682DB";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x1E,0x4D,0xE9,0xFB,0xAA,0x54,0x9F,0xF6,0x62,0x5A,0x8B,0x38,0xB6,0x82,0xDB};

  GetPointsResponse() : status((BackupServerStatus::type)0) {
  }

  virtual ~GetPointsResponse() throw() {}

  BackupServerStatus::type status;
  std::vector<Point>  pts;

  _GetPointsResponse__isset __isset;

  void __set_status(const BackupServerStatus::type val) {
    status = val;
  }

  void __set_pts(const std::vector<Point> & val) {
    pts = val;
  }

  bool operator == (const GetPointsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(pts == rhs.pts))
      return false;
    return true;
  }
  bool operator != (const GetPointsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPointsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPointsResponse &a, GetPointsResponse &b);

} // namespace

#endif
