// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MockDB.h"
#include "GeoPoint.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::MockDBServer;

using namespace std;

class MockDBHandler : virtual public MockDBIf {
 public:
  MockDBHandler() {
    // Your initialization goes here
  }

  void GetPointsInRegion(GetPointsResponse& _return, const ThriftGeoPoint& ll, const ThriftGeoPoint& ur) {
    // Your implementation goes here
    printf("GetPointsInRegion\n");
  }

  ServerStatus::type AddPoint(const ThriftGeoPoint& p) {
    // Your implementation goes here
    printf("AddPoint\n");
  }

  double GetEndXCoordinate(const double start_x_coord, const int32_t num_points) {
    // Your implementation goes here
    printf("GetEndXCoordinate\n");
  }

 private:
	multimap<GeoPoint,int,> _pts;

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MockDBHandler> handler(new MockDBHandler());
  shared_ptr<TProcessor> processor(new MockDBProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

