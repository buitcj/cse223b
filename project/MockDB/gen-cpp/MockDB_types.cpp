/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MockDB_types.h"

#include <algorithm>

namespace MockDBServer {

int _kServerStatusValues[] = {
  ServerStatus::OK,
  ServerStatus::FAILED
};
const char* _kServerStatusNames[] = {
  "OK",
  "FAILED"
};
const std::map<int, const char*> _ServerStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kServerStatusValues, _kServerStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ThriftGeoPoint::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t ThriftGeoPoint::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t ThriftGeoPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xCoord);
          this->__isset.xCoord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yCoord);
          this->__isset.yCoord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftGeoPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ThriftGeoPoint");

  xfer += oprot->writeFieldBegin("xCoord", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->xCoord);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yCoord", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->yCoord);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftGeoPoint &a, ThriftGeoPoint &b) {
  using ::std::swap;
  swap(a.xCoord, b.xCoord);
  swap(a.yCoord, b.yCoord);
  swap(a.__isset, b.__isset);
}

const char* GetPointsResponse::ascii_fingerprint = "671E4DE9FBAA549FF6625A8B38B682DB";
const uint8_t GetPointsResponse::binary_fingerprint[16] = {0x67,0x1E,0x4D,0xE9,0xFB,0xAA,0x54,0x9F,0xF6,0x62,0x5A,0x8B,0x38,0xB6,0x82,0xDB};

uint32_t GetPointsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (ServerStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pts.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->pts.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->pts[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetPointsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetPointsResponse");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pts", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pts.size()));
    std::vector<ThriftGeoPoint> ::const_iterator _iter6;
    for (_iter6 = this->pts.begin(); _iter6 != this->pts.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetPointsResponse &a, GetPointsResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.pts, b.pts);
  swap(a.__isset, b.__isset);
}

} // namespace
