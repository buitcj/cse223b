/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MockDB_H
#define MockDB_H

#include <thrift/TDispatchProcessor.h>
#include "MockDB_types.h"

namespace MockDBServer {

class MockDBIf {
 public:
  virtual ~MockDBIf() {}
  virtual void GetPointsInRegion(GetPointsResponse& _return, const ThriftGeoPoint& ll, const ThriftGeoPoint& ur) = 0;
  virtual ServerStatus::type AddPoint(const ThriftGeoPoint& p) = 0;
  virtual double GetEndXCoordinate(const double start_x_coord, const int32_t num_points) = 0;
};

class MockDBIfFactory {
 public:
  typedef MockDBIf Handler;

  virtual ~MockDBIfFactory() {}

  virtual MockDBIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MockDBIf* /* handler */) = 0;
};

class MockDBIfSingletonFactory : virtual public MockDBIfFactory {
 public:
  MockDBIfSingletonFactory(const boost::shared_ptr<MockDBIf>& iface) : iface_(iface) {}
  virtual ~MockDBIfSingletonFactory() {}

  virtual MockDBIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MockDBIf* /* handler */) {}

 protected:
  boost::shared_ptr<MockDBIf> iface_;
};

class MockDBNull : virtual public MockDBIf {
 public:
  virtual ~MockDBNull() {}
  void GetPointsInRegion(GetPointsResponse& /* _return */, const ThriftGeoPoint& /* ll */, const ThriftGeoPoint& /* ur */) {
    return;
  }
  ServerStatus::type AddPoint(const ThriftGeoPoint& /* p */) {
    ServerStatus::type _return = (ServerStatus::type)0;
    return _return;
  }
  double GetEndXCoordinate(const double /* start_x_coord */, const int32_t /* num_points */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _MockDB_GetPointsInRegion_args__isset {
  _MockDB_GetPointsInRegion_args__isset() : ll(false), ur(false) {}
  bool ll;
  bool ur;
} _MockDB_GetPointsInRegion_args__isset;

class MockDB_GetPointsInRegion_args {
 public:

  MockDB_GetPointsInRegion_args() {
  }

  virtual ~MockDB_GetPointsInRegion_args() throw() {}

  ThriftGeoPoint ll;
  ThriftGeoPoint ur;

  _MockDB_GetPointsInRegion_args__isset __isset;

  void __set_ll(const ThriftGeoPoint& val) {
    ll = val;
  }

  void __set_ur(const ThriftGeoPoint& val) {
    ur = val;
  }

  bool operator == (const MockDB_GetPointsInRegion_args & rhs) const
  {
    if (!(ll == rhs.ll))
      return false;
    if (!(ur == rhs.ur))
      return false;
    return true;
  }
  bool operator != (const MockDB_GetPointsInRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_GetPointsInRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MockDB_GetPointsInRegion_pargs {
 public:


  virtual ~MockDB_GetPointsInRegion_pargs() throw() {}

  const ThriftGeoPoint* ll;
  const ThriftGeoPoint* ur;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_GetPointsInRegion_result__isset {
  _MockDB_GetPointsInRegion_result__isset() : success(false) {}
  bool success;
} _MockDB_GetPointsInRegion_result__isset;

class MockDB_GetPointsInRegion_result {
 public:

  MockDB_GetPointsInRegion_result() {
  }

  virtual ~MockDB_GetPointsInRegion_result() throw() {}

  GetPointsResponse success;

  _MockDB_GetPointsInRegion_result__isset __isset;

  void __set_success(const GetPointsResponse& val) {
    success = val;
  }

  bool operator == (const MockDB_GetPointsInRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MockDB_GetPointsInRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_GetPointsInRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_GetPointsInRegion_presult__isset {
  _MockDB_GetPointsInRegion_presult__isset() : success(false) {}
  bool success;
} _MockDB_GetPointsInRegion_presult__isset;

class MockDB_GetPointsInRegion_presult {
 public:


  virtual ~MockDB_GetPointsInRegion_presult() throw() {}

  GetPointsResponse* success;

  _MockDB_GetPointsInRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MockDB_AddPoint_args__isset {
  _MockDB_AddPoint_args__isset() : p(false) {}
  bool p;
} _MockDB_AddPoint_args__isset;

class MockDB_AddPoint_args {
 public:

  MockDB_AddPoint_args() {
  }

  virtual ~MockDB_AddPoint_args() throw() {}

  ThriftGeoPoint p;

  _MockDB_AddPoint_args__isset __isset;

  void __set_p(const ThriftGeoPoint& val) {
    p = val;
  }

  bool operator == (const MockDB_AddPoint_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    return true;
  }
  bool operator != (const MockDB_AddPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_AddPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MockDB_AddPoint_pargs {
 public:


  virtual ~MockDB_AddPoint_pargs() throw() {}

  const ThriftGeoPoint* p;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_AddPoint_result__isset {
  _MockDB_AddPoint_result__isset() : success(false) {}
  bool success;
} _MockDB_AddPoint_result__isset;

class MockDB_AddPoint_result {
 public:

  MockDB_AddPoint_result() : success((ServerStatus::type)0) {
  }

  virtual ~MockDB_AddPoint_result() throw() {}

  ServerStatus::type success;

  _MockDB_AddPoint_result__isset __isset;

  void __set_success(const ServerStatus::type val) {
    success = val;
  }

  bool operator == (const MockDB_AddPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MockDB_AddPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_AddPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_AddPoint_presult__isset {
  _MockDB_AddPoint_presult__isset() : success(false) {}
  bool success;
} _MockDB_AddPoint_presult__isset;

class MockDB_AddPoint_presult {
 public:


  virtual ~MockDB_AddPoint_presult() throw() {}

  ServerStatus::type* success;

  _MockDB_AddPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MockDB_GetEndXCoordinate_args__isset {
  _MockDB_GetEndXCoordinate_args__isset() : start_x_coord(false), num_points(false) {}
  bool start_x_coord;
  bool num_points;
} _MockDB_GetEndXCoordinate_args__isset;

class MockDB_GetEndXCoordinate_args {
 public:

  MockDB_GetEndXCoordinate_args() : start_x_coord(0), num_points(0) {
  }

  virtual ~MockDB_GetEndXCoordinate_args() throw() {}

  double start_x_coord;
  int32_t num_points;

  _MockDB_GetEndXCoordinate_args__isset __isset;

  void __set_start_x_coord(const double val) {
    start_x_coord = val;
  }

  void __set_num_points(const int32_t val) {
    num_points = val;
  }

  bool operator == (const MockDB_GetEndXCoordinate_args & rhs) const
  {
    if (!(start_x_coord == rhs.start_x_coord))
      return false;
    if (!(num_points == rhs.num_points))
      return false;
    return true;
  }
  bool operator != (const MockDB_GetEndXCoordinate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_GetEndXCoordinate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MockDB_GetEndXCoordinate_pargs {
 public:


  virtual ~MockDB_GetEndXCoordinate_pargs() throw() {}

  const double* start_x_coord;
  const int32_t* num_points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_GetEndXCoordinate_result__isset {
  _MockDB_GetEndXCoordinate_result__isset() : success(false) {}
  bool success;
} _MockDB_GetEndXCoordinate_result__isset;

class MockDB_GetEndXCoordinate_result {
 public:

  MockDB_GetEndXCoordinate_result() : success(0) {
  }

  virtual ~MockDB_GetEndXCoordinate_result() throw() {}

  double success;

  _MockDB_GetEndXCoordinate_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const MockDB_GetEndXCoordinate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MockDB_GetEndXCoordinate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MockDB_GetEndXCoordinate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MockDB_GetEndXCoordinate_presult__isset {
  _MockDB_GetEndXCoordinate_presult__isset() : success(false) {}
  bool success;
} _MockDB_GetEndXCoordinate_presult__isset;

class MockDB_GetEndXCoordinate_presult {
 public:


  virtual ~MockDB_GetEndXCoordinate_presult() throw() {}

  double* success;

  _MockDB_GetEndXCoordinate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MockDBClient : virtual public MockDBIf {
 public:
  MockDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MockDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetPointsInRegion(GetPointsResponse& _return, const ThriftGeoPoint& ll, const ThriftGeoPoint& ur);
  void send_GetPointsInRegion(const ThriftGeoPoint& ll, const ThriftGeoPoint& ur);
  void recv_GetPointsInRegion(GetPointsResponse& _return);
  ServerStatus::type AddPoint(const ThriftGeoPoint& p);
  void send_AddPoint(const ThriftGeoPoint& p);
  ServerStatus::type recv_AddPoint();
  double GetEndXCoordinate(const double start_x_coord, const int32_t num_points);
  void send_GetEndXCoordinate(const double start_x_coord, const int32_t num_points);
  double recv_GetEndXCoordinate();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MockDBProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MockDBIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MockDBProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetPointsInRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEndXCoordinate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MockDBProcessor(boost::shared_ptr<MockDBIf> iface) :
    iface_(iface) {
    processMap_["GetPointsInRegion"] = &MockDBProcessor::process_GetPointsInRegion;
    processMap_["AddPoint"] = &MockDBProcessor::process_AddPoint;
    processMap_["GetEndXCoordinate"] = &MockDBProcessor::process_GetEndXCoordinate;
  }

  virtual ~MockDBProcessor() {}
};

class MockDBProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MockDBProcessorFactory(const ::boost::shared_ptr< MockDBIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MockDBIfFactory > handlerFactory_;
};

class MockDBMultiface : virtual public MockDBIf {
 public:
  MockDBMultiface(std::vector<boost::shared_ptr<MockDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MockDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MockDBIf> > ifaces_;
  MockDBMultiface() {}
  void add(boost::shared_ptr<MockDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetPointsInRegion(GetPointsResponse& _return, const ThriftGeoPoint& ll, const ThriftGeoPoint& ur) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPointsInRegion(_return, ll, ur);
    }
    ifaces_[i]->GetPointsInRegion(_return, ll, ur);
    return;
  }

  ServerStatus::type AddPoint(const ThriftGeoPoint& p) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddPoint(p);
    }
    return ifaces_[i]->AddPoint(p);
  }

  double GetEndXCoordinate(const double start_x_coord, const int32_t num_points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEndXCoordinate(start_x_coord, num_points);
    }
    return ifaces_[i]->GetEndXCoordinate(start_x_coord, num_points);
  }

};

} // namespace

#endif
