// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BackupServer.h"
#include <libpq-fe.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace std;
using namespace  ::BackupServer;

class BackupServerHandler : virtual public BackupServerIf {
 private: 
    vector<Point> pts;
 public:
  BackupServerHandler() {
    // Your initialization goes here
  }

  void GetPointsInRegion(GetPointsResponse& _return, const Point& ul, const Point& lr) {
    // Your implementation goes here
    printf("GetPointsInRegion\n");
  }

  int32_t AddPoint(const Point& p, const std::string& desc) {
    // Your implementation goes here
    printf("AddPoint\n");
    return (int32_t) 3;
  }

  void Commit(const Point& p, const int32_t id) {
    // Your implementation goes here
    printf("Commit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BackupServerHandler> handler(new BackupServerHandler());
  shared_ptr<TProcessor> processor(new BackupServerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

